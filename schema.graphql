type Comment {
  body: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CreateCommentInput {
  body: String!
  postId: ID!
}

type CreateCommentPayload {
  comment: Comment
}

input CreatePostInput {
  body: String!
}

type CreatePostPayload {
  post: Post
}

scalar DateTime

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentPayload!
  createPost(input: CreatePostInput!): CreatePostPayload!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Post {
  body: String!
  commentCount: Int!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type Query {
  comments(after: String, first: Int = 32, postId: ID!): CommentConnection!
  post(id: ID!): Post
  posts(after: String, first: Int = 32): PostConnection!
}
